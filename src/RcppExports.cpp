// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// det2
double det2(const Eigen::Map<Eigen::MatrixXd> mat, const bool logarithm);
RcppExport SEXP ICAOD_det2(SEXP matSEXP, SEXP logarithmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const bool >::type logarithm(logarithmSEXP);
    rcpp_result_gen = Rcpp::wrap(det2(mat, logarithm));
    return rcpp_result_gen;
END_RCPP
}
// FIM_comp_inhibition
Eigen::MatrixXd FIM_comp_inhibition(const std::vector<double> S, const std::vector<double> I, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_comp_inhibition(SEXP SSEXP, SEXP ISEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type S(SSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type I(ISEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_comp_inhibition(S, I, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_emax_3par
Eigen::MatrixXd FIM_emax_3par(const std::vector<double> x, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_emax_3par(SEXP xSEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_emax_3par(x, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_exp_2par
Rcpp::NumericMatrix FIM_exp_2par(const std::vector<double> x, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_exp_2par(SEXP xSEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_exp_2par(x, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_exp_3par
Eigen::MatrixXd FIM_exp_3par(const std::vector<double> x, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_exp_3par(SEXP xSEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_exp_3par(x, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_logisitic_1par
Rcpp::NumericMatrix FIM_logisitic_1par(const std::vector<double> x, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_logisitic_1par(SEXP xSEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_logisitic_1par(x, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_logistic_4par
Eigen::MatrixXd FIM_logistic_4par(const std::vector<double> x, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_logistic_4par(SEXP xSEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_logistic_4par(x, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_logistic
Rcpp::NumericMatrix FIM_logistic(const std::vector<double> x, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_logistic(SEXP xSEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_logistic(x, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_loglin
Eigen::MatrixXd FIM_loglin(const std::vector<double> x, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_loglin(SEXP xSEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_loglin(x, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_michaelis
Rcpp::NumericMatrix FIM_michaelis(const std::vector<double> x, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_michaelis(SEXP xSEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_michaelis(x, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_mixed_inhibition
Eigen::MatrixXd FIM_mixed_inhibition(const std::vector<double> S, const std::vector<double> I, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_mixed_inhibition(SEXP SSEXP, SEXP ISEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type S(SSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type I(ISEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_mixed_inhibition(S, I, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_noncomp_inhibition
Eigen::MatrixXd FIM_noncomp_inhibition(const std::vector<double> S, const std::vector<double> I, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_noncomp_inhibition(SEXP SSEXP, SEXP ISEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type S(SSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type I(ISEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_noncomp_inhibition(S, I, w, param));
    return rcpp_result_gen;
END_RCPP
}
// FIM_power_logistic
Rcpp::NumericMatrix FIM_power_logistic(const std::vector<double> x, const std::vector<double> w, const std::vector<double> param, const double s);
RcppExport SEXP ICAOD_FIM_power_logistic(SEXP xSEXP, SEXP wSEXP, SEXP paramSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_power_logistic(x, w, param, s));
    return rcpp_result_gen;
END_RCPP
}
// FIM_uncomp_inhibition
Eigen::MatrixXd FIM_uncomp_inhibition(const std::vector<double> S, const std::vector<double> I, const std::vector<double> w, const std::vector<double> param);
RcppExport SEXP ICAOD_FIM_uncomp_inhibition(SEXP SSEXP, SEXP ISEXP, SEXP wSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type S(SSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type I(ISEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(FIM_uncomp_inhibition(S, I, w, param));
    return rcpp_result_gen;
END_RCPP
}
